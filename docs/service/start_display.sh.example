#!/bin/bash

# Example startup script for the display service
# Copy this file to ~/start_display.sh and make it executable with:
# cp start_display.sh.example ~/start_display.sh
# chmod +x ~/start_display.sh
echo "----------------------------------------"
echo "Starting display service script"
echo "Version: 0.0.19 (2025-01-03)"  # AUTO-INCREMENT
echo "----------------------------------------"
echo "MIT License - Copyright (c) 2024 Bence Damokos"
echo "----------------------------------------"

# Function to check and update a service file if needed
check_service_file() {
    local example_file=$1
    local service_name
    local installed_file
    local needs_username_change=false
    local current_user=$(whoami)
    
    # Determine if this is an example file that needs username adjustment
    if [[ "$example_file" == *.example ]]; then
        service_name=$(basename "$example_file" .example)
        needs_username_change=true
    else
        service_name=$(basename "$example_file")
    fi
    installed_file="/etc/systemd/system/$service_name"
    
    echo "Checking $service_name..."
    if [ -f "$example_file" ]; then
        # Get current version from installed service file
        INSTALLED_VERSION=""
        if sudo test -f "$installed_file"; then
            INSTALLED_VERSION=$(sudo grep "^# Version: " "$installed_file" 2>/dev/null | cut -d' ' -f3)
            
            # Get new version from example file
            NEW_VERSION=$(grep "^# Version: " "$example_file" | cut -d' ' -f3)
            
            if [ "$INSTALLED_VERSION" != "$NEW_VERSION" ]; then
                echo "Service file $service_name needs to be updated (Current: ${INSTALLED_VERSION:-none}, New: $NEW_VERSION)"
                if [ "$needs_username_change" = true ]; then
                    # Only filter updates for display.service files
                    if [[ "$service_name" == display.service* ]]; then
                        # Only update if this is the service file for the current mode
                        if [ "$example_file" = "display.service.example" ]; then
                            echo "Updating service file with username $current_user..."
                            # Create a temporary file with username replaced
                            local temp_file=$(mktemp)
                            sed "s|/home/pi|/home/$current_user|g" "$example_file" > "$temp_file"
                            sed -i "s|User=pi|User=$current_user|g" "$temp_file"
                            
                            # Copy the modified file to systemd
                            sudo cp "$temp_file" "$installed_file"
                            rm "$temp_file"
                            
                            sudo systemctl daemon-reload
                            echo "Service file updated and daemon reloaded."
                        else
                            echo "This is an alternative service mode. Not installing automatically."
                            echo "To switch to this mode, use the switch_display_mode.sh script."
                        fi
                    else
                        # For non-display services, always update if they need username changes
                        echo "Updating service file with username $current_user..."
                        # Create a temporary file with username replaced
                        local temp_file=$(mktemp)
                        sed "s|/home/pi|/home/$current_user|g" "$example_file" > "$temp_file"
                        sed -i "s|User=pi|User=$current_user|g" "$temp_file"
                        
                        # Copy the modified file to systemd
                        sudo cp "$temp_file" "$installed_file"
                        rm "$temp_file"
                        
                        sudo systemctl daemon-reload
                        echo "Service file updated and daemon reloaded."
                    fi
                else
                    echo "Updating service file..."
                    sudo cp "$example_file" "$installed_file"
                    sudo systemctl daemon-reload
                    echo "Service file updated and daemon reloaded."
                fi
            else
                echo "Service file $service_name is up to date."
            fi
        else
            if [ "$needs_username_change" = true ]; then
                if [[ "$service_name" == display.service* ]]; then
                    # Only install if this is the service file for the current mode
                    if [ "$example_file" = "display.service.example" ]; then
                        echo "Service $service_name is not installed."
                        echo "Creating service file with username $current_user..."
                        # Create a temporary file with username replaced
                        local temp_file=$(mktemp)
                        sed "s|/home/pi|/home/$current_user|g" "$example_file" > "$temp_file"
                        sed -i "s|User=pi|User=$current_user|g" "$temp_file"
                        
                        # Copy the modified file to systemd
                        sudo cp "$temp_file" "$installed_file"
                        rm "$temp_file"
                        
                        sudo systemctl daemon-reload
                        echo "Service file created and daemon reloaded."
                        echo "To enable the service, run: sudo systemctl enable $service_name"
                        echo "To start the service, run: sudo systemctl start $service_name"
                    else
                        echo "This is an alternative service mode. Not installing automatically."
                        echo "To switch to this mode, use the switch_display_mode.sh script."
                    fi
                else
                    # For non-display services, always install if they need username changes
                    echo "Service $service_name is not installed."
                    echo "Creating service file with username $current_user..."
                    # Create a temporary file with username replaced
                    local temp_file=$(mktemp)
                    sed "s|/home/pi|/home/$current_user|g" "$example_file" > "$temp_file"
                    sed -i "s|User=pi|User=$current_user|g" "$temp_file"
                    
                    # Copy the modified file to systemd
                    sudo cp "$temp_file" "$installed_file"
                    rm "$temp_file"
                    
                    sudo systemctl daemon-reload
                    echo "Service file created and daemon reloaded."
                    echo "To enable the service, run: sudo systemctl enable $service_name"
                    echo "To start the service, run: sudo systemctl start $service_name"
                fi
            else
                echo "Warning: $service_name is not installed. If you want to use this feature, please install it first."
                echo "Available version: $(grep "^# Version: " "$example_file" | cut -d' ' -f3)"
            fi
        fi
    fi
}

# Sleep for 10 seconds to allow for network to be ready
sleep 10

# Source version checking functions
source ~/display_programme/docs/service/version_check.sh

# Get update mode from environment file
UPDATE_MODE="main"  # Default to main for backward compatibility
if [ -f ~/display_programme/.env ]; then
    source ~/display_programme/.env
fi

# Step 1: Update display_programme first
echo "----------------------------------------"
cd ~/display_programme
echo "Checking for display_programme updates..."
if check_update_needed "$HOME/display_programme" "rpi_waiting_time_display" "$UPDATE_MODE"; then
    echo "Performing update..."
    perform_update "$HOME/display_programme" "rpi_waiting_time_display" "$UPDATE_MODE"
    echo "Display programme updated."
else
    echo "No updates needed."
fi
echo "----------------------------------------"

# Step 2: Check and update startup script if needed
echo "Checking and updating startup script..."
if [ -f ~/display_programme/docs/service/start_display.sh.example ] && \
   ! cmp -s ~/display_programme/docs/service/start_display.sh.example ~/start_display.sh; then
    echo "Updating start_display.sh script..."
    cp ~/display_programme/docs/service/start_display.sh.example ~/start_display.sh.new
    chmod +x ~/start_display.sh.new
    mv ~/start_display.sh.new ~/start_display.sh
    echo "Script updated. Please restart the service."
    echo "Exiting with status 0 - script update completed successfully"
    systemd-notify --status="Script updated successfully. Service restart required."
    exit 0
fi
echo "Startup script is up to date."
echo "----------------------------------------"

# Step 3: Check and update service files if needed
echo "Checking service files..."
cd ~/display_programme/docs/service

# Check main display service (requires username adjustment)
check_service_file "display.service.example"

# Check optional services (direct install)
check_service_file "bluetooth-serial.service"
check_service_file "webserial.service.example"

echo "----------------------------------------"

# Step 4: Update brussels_transit
cd ~/brussels_transit
echo "Checking for brussels_transit updates..."
if check_update_needed "$HOME/brussels_transit" "brussels_transit" "$UPDATE_MODE"; then
    echo "Performing update..."
    perform_update "$HOME/brussels_transit" "brussels_transit" "$UPDATE_MODE"
    echo "Brussels transit updated."
else
    echo "No updates needed."
fi
echo "----------------------------------------"

echo "Activating virtual environment..."
# Step 5: Activate virtual environment
source ~/display_env/bin/activate
echo "Virtual environment activated."
echo "----------------------------------------"

# Step 6: Install requirements if changed
echo "Checking display_programme requirements..."
cd ~/display_programme
if [ ! -f ~/.display_requirements_version ] || \
   ! grep -q "$(grep "^# Version: " requirements.txt)" ~/.display_requirements_version; then
    echo "Requirements changed, installing..."
    pip install -r requirements.txt
    grep "^# Version: " requirements.txt > ~/.display_requirements_version
    echo "Requirements installed."
else
    echo "Requirements unchanged, skipping installation."
fi

echo "Checking brussels_transit requirements..."
cd ~/brussels_transit
if [ ! -f ~/.brussels_transit_requirements_version ] || \
   ! grep -q "$(grep "^# Version: " requirements.txt)" ~/.brussels_transit_requirements_version; then
    echo "Requirements changed, installing..."
    pip install -r requirements.txt
    grep "^# Version: " requirements.txt > ~/.brussels_transit_requirements_version
    echo "Requirements installed."
else
    echo "Requirements unchanged, skipping installation."
fi
echo "----------------------------------------"

# Store PIDs for cleanup
BACKEND_PID=""
DISPLAY_PID=""

# Function to clean up on exit
cleanup() {
    echo "Cleaning up..."
    
    # Kill backend if running
    if [ ! -z "$BACKEND_PID" ]; then
        echo "Stopping backend server..."
        kill $BACKEND_PID
    fi
    
    # If display program is running, send SIGTERM to allow for clean shutdown
    if [ ! -z "$DISPLAY_PID" ]; then
        echo "Stopping display program..."
        kill $DISPLAY_PID
        # Wait for display program to cleanup
        wait $DISPLAY_PID
    fi
    
    exit 0
}

# Trap SIGTERM and SIGINT
trap cleanup SIGTERM SIGINT

# Step 7: Start the backend server
cd ~/brussels_transit
echo "Starting backend server..."
python start.py &
BACKEND_PID=$!
echo "Backend server started."
echo "----------------------------------------"

# Wait for backend to start
sleep 15

# Step 8: Start the display program
cd ~/display_programme
echo "Starting display program..."
python basic.py &
DISPLAY_PID=$!
echo "Display program started."
echo "----------------------------------------"

# Wait for any process to exit
wait -n

# Execute cleanup when any process exits
cleanup
