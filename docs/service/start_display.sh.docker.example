#!/bin/bash

# Example startup script for the display service (Docker Version)
# Copy this file to ~/start_display.sh and make it executable with:
# cp start_display.sh.docker.example ~/start_display.sh
# chmod +x ~/start_display.sh
echo "----------------------------------------"
echo "Starting display service script (Docker Version)"
echo "Version: 0.0.2 (2024-12-21)"  # AUTO-INCREMENT
echo "----------------------------------------"
echo "MIT License - Copyright (c) 2024 Bence Damokos"
echo "----------------------------------------"

# Function to check and update a service file if needed
check_service_file() {
    local example_file=$1
    local service_name
    local installed_file
    local needs_username_change=false
    local current_user=$(whoami)
    
    # Determine if this is an example file that needs username adjustment
    if [[ "$example_file" == *.example ]]; then
        service_name=$(basename "$example_file" .example)
        needs_username_change=true
    else
        service_name=$(basename "$example_file")
    fi
    installed_file="/etc/systemd/system/$service_name"
    
    echo "Checking $service_name..."
    if [ -f "$example_file" ]; then
        # Get current version from installed service file
        INSTALLED_VERSION=""
        if [ -f "$installed_file" ]; then
            INSTALLED_VERSION=$(grep "^# Version: " "$installed_file" | cut -d' ' -f3)
            
            # Get new version from example file
            NEW_VERSION=$(grep "^# Version: " "$example_file" | cut -d' ' -f3)
            
            if [ "$INSTALLED_VERSION" != "$NEW_VERSION" ]; then
                echo "Service file $service_name needs to be updated (Current: ${INSTALLED_VERSION:-none}, New: $NEW_VERSION)"
                if [ "$needs_username_change" = true ]; then
                    echo "Updating service file with username $current_user..."
                    # Create a temporary file with username replaced
                    local temp_file=$(mktemp)
                    sed "s|/home/pi|/home/$current_user|g" "$example_file" > "$temp_file"
                    sed -i "s|User=pi|User=$current_user|g" "$temp_file"
                    
                    # Copy the modified file to systemd
                    sudo cp "$temp_file" "$installed_file"
                    rm "$temp_file"
                    
                    sudo systemctl daemon-reload
                    echo "Service file updated and daemon reloaded."
                else
                    echo "Updating service file..."
                    sudo cp "$example_file" "$installed_file"
                    sudo systemctl daemon-reload
                    echo "Service file updated and daemon reloaded."
                fi
            else
                echo "Service file $service_name is up to date."
            fi
        else
            if [ "$needs_username_change" = true ]; then
                echo "Service $service_name is not installed."
                echo "Creating service file with username $current_user..."
                # Create a temporary file with username replaced
                local temp_file=$(mktemp)
                sed "s|/home/pi|/home/$current_user|g" "$example_file" > "$temp_file"
                sed -i "s|User=pi|User=$current_user|g" "$temp_file"
                
                # Copy the modified file to systemd
                sudo cp "$temp_file" "$installed_file"
                rm "$temp_file"
                
                sudo systemctl daemon-reload
                echo "Service file created and daemon reloaded."
                echo "To enable the service, run: sudo systemctl enable $service_name"
                echo "To start the service, run: sudo systemctl start $service_name"
            else
                echo "Warning: $service_name is not installed. If you want to use this feature, please install it first."
                echo "Available version: $(grep "^# Version: " "$example_file" | cut -d' ' -f3)"
            fi
        fi
    fi
}

# Sleep for 10 seconds to allow for network and Docker to be ready
sleep 10

# Step 1: Update display_programme first
echo "----------------------------------------"
echo "Updating display_programme from git..."
cd ~/display_programme
echo "Updating display_programme from git..."
git fetch -v origin main
if [ "$(git rev-parse HEAD)" != "$(git rev-parse origin/main)" ]; then
    echo "Updates found, resetting to origin/main..."
    git reset --hard origin/main
    git pull -v origin main
    echo "Display programme updated."
else
    echo "Already up to date."
fi
echo "----------------------------------------"

# Step 2: Check and update startup script if needed
echo "Checking and updating startup script..."
if [ -f ~/display_programme/docs/service/start_display.sh.docker.example ] && \
   ! cmp -s ~/display_programme/docs/service/start_display.sh.docker.example ~/start_display.sh; then
    echo "Updating start_display.sh script..."
    cp ~/display_programme/docs/service/start_display.sh.docker.example ~/start_display.sh.new
    chmod +x ~/start_display.sh.new
    mv ~/start_display.sh.new ~/start_display.sh
    echo "Script updated. Please restart the service."
    echo "Exiting with status 0 - script update completed successfully"
    systemd-notify --status="Script updated successfully. Service restart required."
    exit 0
fi
echo "Startup script is up to date."
echo "----------------------------------------"

# Step 3: Check and update service files if needed
echo "Checking service files..."
cd ~/display_programme/docs/service

# Check main display service (requires username adjustment)
check_service_file "display.service.docker.example"

# Check optional services (direct install)
check_service_file "bluetooth-serial.service"
check_service_file "webserial.service"

echo "----------------------------------------"

# Step 4: Update brussels_transit and rebuild Docker image
cd ~/brussels_transit
echo "Updating brussels_transit from git..."
git fetch -v origin main
git reset  --hard origin/main
git pull -v origin main

# Build/update Docker image
echo "Building Docker image..."
docker build -t brussels_transit:latest .
echo "----------------------------------------"

# Step 5: Activate virtual environment (for display program only)
echo "Activating virtual environment..."
source ~/display_env/bin/activate
echo "Virtual environment activated."
echo "----------------------------------------"

# Step 6: Install requirements (for display program only) if changed
echo "Checking requirements..."
cd ~/display_programme
if [ ! -f ~/.display_requirements_version ] || \
   ! grep -q "$(grep "^# Version: " requirements.txt)" ~/.display_requirements_version; then
    echo "Requirements changed, installing..."
    pip install -r requirements.txt
    grep "^# Version: " requirements.txt > ~/.display_requirements_version
    echo "Requirements installed."
else
    echo "Requirements unchanged, skipping installation."
fi
echo "----------------------------------------"

# Store container ID and display PID for cleanup
CONTAINER_ID=""
DISPLAY_PID=""

# Function to clean up on exit
cleanup() {
    echo "Cleaning up..."
    
    # Stop Docker container if running
    if [ ! -z "$CONTAINER_ID" ]; then
        echo "Stopping Docker container..."
        docker stop $CONTAINER_ID
    fi
    
    # If display program is running, send SIGTERM to allow for clean shutdown
    if [ ! -z "$DISPLAY_PID" ]; then
        echo "Stopping display program..."
        kill $DISPLAY_PID
        # Wait for display program to cleanup
        wait $DISPLAY_PID
    fi
    
    exit 0
}

# Trap SIGTERM and SIGINT
trap cleanup SIGTERM SIGINT

# Step 7: Clean up any existing containers
echo "Cleaning up any existing brussels_transit containers..."
docker ps -q --filter "ancestor=brussels_transit:latest" | xargs -r docker stop

# Start the backend server in Docker
echo "Starting backend server in Docker..."
CONTAINER_ID=$(docker run -d --restart=no -p 8000:8000 brussels_transit:latest)
echo "Backend server started in container: $CONTAINER_ID"
echo "----------------------------------------"

# Wait for backend to start
sleep 5

# Step 8: Start the display program
cd ~/display_programme
echo "Starting display program..."
python basic.py &
DISPLAY_PID=$!
echo "Display program started."
echo "----------------------------------------"

# Wait for any process to exit
wait -n

# Execute cleanup when any process exits 